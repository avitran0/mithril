#pragma once

#include <type_traits>

#define CONSTANT(name, value)                                                       \
    template <typename T, typename = std::enable_if_t<std::is_floating_point_v<T>>> \
    constexpr T name() {                                                            \
        return static_cast<T>(value);                                               \
    }

namespace numbers {
    CONSTANT(half, 5.000000000000000000000000000000000000e-01)
    CONSTANT(third, 3.333333333333333333333333333333333333e-01)
    CONSTANT(twothirds, 6.666666666666666666666666666666666666e-01)
    CONSTANT(two_thirds, 6.666666666666666666666666666666666666e-01)
    CONSTANT(sixth, 1.666666666666666666666666666666666666e-01)
    CONSTANT(three_quarters, 7.500000000000000000000000000000000000e-01)
    CONSTANT(root_two, 1.414213562373095048801688724209698078e+00)
    CONSTANT(root_three, 1.732050807568877293527446341505872366e+00)
    CONSTANT(half_root_two, 7.071067811865475244008443621048490392e-01)
    CONSTANT(ln_two, 6.931471805599453094172321214581765680e-01)
    CONSTANT(ln_ln_two, -3.665129205816643270124391582326694694e-01)
    CONSTANT(root_ln_four, 1.177410022515474691011569326459699637e+00)
    CONSTANT(one_div_root_two, 7.071067811865475244008443621048490392e-01)
    CONSTANT(pi, 3.141592653589793238462643383279502884e+00)
    CONSTANT(half_pi, 1.570796326794896619231321691639751442e+00)
    CONSTANT(third_pi, 1.047197551196597746154214461093167628e+00)
    CONSTANT(sixth_pi, 5.235987755982988730771072305465838140e-01)
    CONSTANT(two_pi, 6.283185307179586476925286766559005768e+00)
    CONSTANT(two_thirds_pi, 2.094395102393195492308428922186335256e+00)
    CONSTANT(three_quarters_pi, 2.356194490192344928846982537459627163e+00)
    CONSTANT(four_thirds_pi, 4.188790204786390984616857844372670512e+00)
    CONSTANT(one_div_two_pi, 1.591549430918953357688837633725143620e-01)
    CONSTANT(one_div_root_two_pi, 3.989422804014326779399460599343818684e-01)
    CONSTANT(root_pi, 1.772453850905516027298167483341145182e+00)
    CONSTANT(root_half_pi, 1.253314137315500251207882642405522626e+00)
    CONSTANT(root_two_pi, 2.506628274631000502415765284811045253e+00)
    CONSTANT(log_root_two_pi, 9.189385332046727417803297364056176398e-01)
    CONSTANT(one_div_root_pi, 5.641895835477562869480794515607725858e-01)
    CONSTANT(root_one_div_pi, 5.641895835477562869480794515607725858e-01)
    CONSTANT(pi_minus_three, 1.415926535897932384626433832795028841e-01)
    CONSTANT(four_minus_pi, 8.584073464102067615373566167204971158e-01)
    CONSTANT(pi_pow_e, 2.245915771836104547342715220454373502e+01)
    CONSTANT(pi_sqr, 9.869604401089358618834490999876151135e+00)
    CONSTANT(pi_sqr_div_six, 1.644934066848226436472415166646025189e+00)
    CONSTANT(pi_cubed, 3.100627668029982017547631506710139520e+01)
    CONSTANT(cbrt_pi, 1.464591887561523263020142527263790391e+00)
    CONSTANT(one_div_cbrt_pi, 6.827840632552956814670208331581645981e-01)
    CONSTANT(log2_e, 1.44269504088896340735992468100189213742664595415298)
    CONSTANT(e, 2.718281828459045235360287471352662497e+00)
    CONSTANT(exp_minus_half, 6.065306597126334236037995349911804534e-01)
    CONSTANT(exp_minus_one, 3.678794411714423215955237701614608674e-01)
    CONSTANT(e_pow_pi, 2.314069263277926900572908636794854738e+01)
    CONSTANT(root_e, 1.648721270700128146848650787814163571e+00)
    CONSTANT(log10_e, 4.342944819032518276511289189166050822e-01)
    CONSTANT(one_div_log10_e, 2.302585092994045684017991454684364207e+00)
    CONSTANT(ln_ten, 2.302585092994045684017991454684364207e+00)
    CONSTANT(degree, 1.745329251994329576923690768488612713e-02)
    CONSTANT(radian, 5.729577951308232087679815481410517033e+01)
    CONSTANT(sin_one, 8.414709848078965066525023216302989996e-01)
    CONSTANT(cos_one, 5.403023058681397174009366074429766037e-01)
    CONSTANT(sinh_one, 1.175201193643801456882381850595600815e+00)
    CONSTANT(cosh_one, 1.543080634815243778477905620757061682e+00)
    CONSTANT(phi, 1.618033988749894848204586834365638117e+00)
    CONSTANT(ln_phi, 4.812118250596034474977589134243684231e-01)
    CONSTANT(one_div_ln_phi, 2.078086921235027537601322606117795767e+00)
    CONSTANT(euler, 5.772156649015328606065120900824024310e-01)
    CONSTANT(one_div_euler, 1.732454714600633473583025315860829681e+00)
    CONSTANT(euler_sqr, 3.331779238077186743183761363552442266e-01)
    CONSTANT(zeta_two, 1.644934066848226436472415166646025189e+00)
    CONSTANT(zeta_three, 1.202056903159594285399738161511449990e+00)
    CONSTANT(catalan, 9.159655941772190150546035149323841107e-01)
    CONSTANT(glaisher, 1.282427129100622636875342568869791727e+00)
    CONSTANT(khinchin, 2.685452001065306445309714835481795693e+00)
    CONSTANT(extreme_value_skewness, 1.139547099404648657492793019389846112e+00)
    CONSTANT(rayleigh_skewness, 6.311106578189371381918993515442277798e-01)
    CONSTANT(rayleigh_kurtosis, 3.245089300687638062848660410619754415e+00)
    CONSTANT(rayleigh_kurtosis_excess, 2.450893006876380628486604106197544154e-01)

    CONSTANT(two_div_pi, 6.366197723675813430755350534900574481e-01)
    CONSTANT(root_two_div_pi, 7.978845608028653558798921198687637369e-01)
    CONSTANT(quarter_pi, 0.785398163397448309615660845819875721049292)
    CONSTANT(one_div_pi, 0.3183098861837906715377675267450287240689192)
    CONSTANT(two_div_root_pi, 1.12837916709551257389615890312154517168810125)

    CONSTANT(first_feigenbaum, 4.66920160910299067185320382046620161725818557747576863274)
    CONSTANT(plastic, 1.324717957244746025960908854478097340734404056901733364534)
    CONSTANT(gauss, 0.834626841674073186281429732799046808993993013490347002449)
    CONSTANT(dottie, 0.739085133215160641655312087673873404013411758900757464965)
    CONSTANT(reciprocal_fibonacci, 3.35988566624317755317201130291892717968890513)
    CONSTANT(laplace_limit, 0.662743419349181580974742097109252907056233549115022417)
}  // namespace numbers
